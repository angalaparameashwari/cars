/*
 * This file is generated by jOOQ.
 */
package com.tej.JooQDemo.jooq.sample.model.tables;


import com.tej.JooQDemo.jooq.sample.model.CarsApp;
import com.tej.JooQDemo.jooq.sample.model.Keys;
import com.tej.JooQDemo.jooq.sample.model.tables.records.ServicesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Services extends TableImpl<ServicesRecord> {

    private static final long serialVersionUID = 283164434;

    /**
     * The reference instance of <code>cars_app.services</code>
     */
    public static final Services SERVICES = new Services();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServicesRecord> getRecordType() {
        return ServicesRecord.class;
    }

    /**
     * The column <code>cars_app.services.id</code>.
     */
    public final TableField<ServicesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('cars_app.services_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>cars_app.services.external_id</code>.
     */
    public final TableField<ServicesRecord, String> EXTERNAL_ID = createField(DSL.name("external_id"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>cars_app.services.brand</code>.
     */
    public final TableField<ServicesRecord, String> BRAND = createField(DSL.name("brand"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>cars_app.services.model</code>.
     */
    public final TableField<ServicesRecord, String> MODEL = createField(DSL.name("model"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>cars_app.services.name</code>.
     */
    public final TableField<ServicesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>cars_app.services.price</code>.
     */
    public final TableField<ServicesRecord, Integer> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>cars_app.services.package</code>.
     */
    public final TableField<ServicesRecord, String> PACKAGE = createField(DSL.name("package"), org.jooq.impl.SQLDataType.VARCHAR(400), this, "");

    /**
     * The column <code>cars_app.services.deleted</code>.
     */
    public final TableField<ServicesRecord, String> DELETED = createField(DSL.name("deleted"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>cars_app.services.created_at</code>.
     */
    public final TableField<ServicesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>cars_app.services.updated_at</code>.
     */
    public final TableField<ServicesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>cars_app.services</code> table reference
     */
    public Services() {
        this(DSL.name("services"), null);
    }

    /**
     * Create an aliased <code>cars_app.services</code> table reference
     */
    public Services(String alias) {
        this(DSL.name(alias), SERVICES);
    }

    /**
     * Create an aliased <code>cars_app.services</code> table reference
     */
    public Services(Name alias) {
        this(alias, SERVICES);
    }

    private Services(Name alias, Table<ServicesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Services(Name alias, Table<ServicesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Services(Table<O> child, ForeignKey<O, ServicesRecord> key) {
        super(child, key, SERVICES);
    }

    @Override
    public Schema getSchema() {
        return CarsApp.CARS_APP;
    }

    @Override
    public Identity<ServicesRecord, Long> getIdentity() {
        return Keys.IDENTITY_SERVICES;
    }

    @Override
    public UniqueKey<ServicesRecord> getPrimaryKey() {
        return Keys.SERVICES_PKEY;
    }

    @Override
    public List<UniqueKey<ServicesRecord>> getKeys() {
        return Arrays.<UniqueKey<ServicesRecord>>asList(Keys.SERVICES_PKEY);
    }

    @Override
    public Services as(String alias) {
        return new Services(DSL.name(alias), this);
    }

    @Override
    public Services as(Name alias) {
        return new Services(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Services rename(String name) {
        return new Services(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Services rename(Name name) {
        return new Services(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, String, String, String, Integer, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
