/*
 * This file is generated by jOOQ.
 */
package com.tej.JooQDemo.jooq.sample.model.tables;


import com.tej.JooQDemo.jooq.sample.model.CarsApp;
import com.tej.JooQDemo.jooq.sample.model.Keys;
import com.tej.JooQDemo.jooq.sample.model.tables.records.AddressesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Addresses extends TableImpl<AddressesRecord> {

    private static final long serialVersionUID = -1663773023;

    /**
     * The reference instance of <code>cars_app.addresses</code>
     */
    public static final Addresses ADDRESSES = new Addresses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AddressesRecord> getRecordType() {
        return AddressesRecord.class;
    }

    /**
     * The column <code>cars_app.addresses.id</code>.
     */
    public final TableField<AddressesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('cars_app.addresses_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>cars_app.addresses.customer_id</code>.
     */
    public final TableField<AddressesRecord, Long> CUSTOMER_ID = createField(DSL.name("customer_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cars_app.addresses.is_primary</code>.
     */
    public final TableField<AddressesRecord, Boolean> IS_PRIMARY = createField(DSL.name("is_primary"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>cars_app.addresses.label</code>.
     */
    public final TableField<AddressesRecord, String> LABEL = createField(DSL.name("label"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>cars_app.addresses.first_name</code>.
     */
    public final TableField<AddressesRecord, String> FIRST_NAME = createField(DSL.name("first_name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>cars_app.addresses.last_name</code>.
     */
    public final TableField<AddressesRecord, String> LAST_NAME = createField(DSL.name("last_name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>cars_app.addresses.email</code>.
     */
    public final TableField<AddressesRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>cars_app.addresses.phone</code>.
     */
    public final TableField<AddressesRecord, String> PHONE = createField(DSL.name("phone"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>cars_app.addresses.line1</code>.
     */
    public final TableField<AddressesRecord, String> LINE1 = createField(DSL.name("line1"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>cars_app.addresses.line2</code>.
     */
    public final TableField<AddressesRecord, String> LINE2 = createField(DSL.name("line2"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>cars_app.addresses.city</code>.
     */
    public final TableField<AddressesRecord, String> CITY = createField(DSL.name("city"), org.jooq.impl.SQLDataType.VARCHAR(55), this, "");

    /**
     * The column <code>cars_app.addresses.statename</code>.
     */
    public final TableField<AddressesRecord, String> STATENAME = createField(DSL.name("statename"), org.jooq.impl.SQLDataType.VARCHAR(55), this, "");

    /**
     * The column <code>cars_app.addresses.country</code>.
     */
    public final TableField<AddressesRecord, String> COUNTRY = createField(DSL.name("country"), org.jooq.impl.SQLDataType.VARCHAR(55), this, "");

    /**
     * The column <code>cars_app.addresses.zip_code</code>.
     */
    public final TableField<AddressesRecord, String> ZIP_CODE = createField(DSL.name("zip_code"), org.jooq.impl.SQLDataType.VARCHAR(55), this, "");

    /**
     * The column <code>cars_app.addresses.deleted</code>.
     */
    public final TableField<AddressesRecord, String> DELETED = createField(DSL.name("deleted"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>cars_app.addresses.created_at</code>.
     */
    public final TableField<AddressesRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>cars_app.addresses.updated_at</code>.
     */
    public final TableField<AddressesRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>cars_app.addresses</code> table reference
     */
    public Addresses() {
        this(DSL.name("addresses"), null);
    }

    /**
     * Create an aliased <code>cars_app.addresses</code> table reference
     */
    public Addresses(String alias) {
        this(DSL.name(alias), ADDRESSES);
    }

    /**
     * Create an aliased <code>cars_app.addresses</code> table reference
     */
    public Addresses(Name alias) {
        this(alias, ADDRESSES);
    }

    private Addresses(Name alias, Table<AddressesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Addresses(Name alias, Table<AddressesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Addresses(Table<O> child, ForeignKey<O, AddressesRecord> key) {
        super(child, key, ADDRESSES);
    }

    @Override
    public Schema getSchema() {
        return CarsApp.CARS_APP;
    }

    @Override
    public Identity<AddressesRecord, Long> getIdentity() {
        return Keys.IDENTITY_ADDRESSES;
    }

    @Override
    public UniqueKey<AddressesRecord> getPrimaryKey() {
        return Keys.ADDRESSES_PKEY;
    }

    @Override
    public List<UniqueKey<AddressesRecord>> getKeys() {
        return Arrays.<UniqueKey<AddressesRecord>>asList(Keys.ADDRESSES_PKEY);
    }

    @Override
    public List<ForeignKey<AddressesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AddressesRecord, ?>>asList(Keys.ADDRESSES__ADDRESSES_CUSTOMER_ID_FKEY);
    }

    public Customers customers() {
        return new Customers(this, Keys.ADDRESSES__ADDRESSES_CUSTOMER_ID_FKEY);
    }

    @Override
    public Addresses as(String alias) {
        return new Addresses(DSL.name(alias), this);
    }

    @Override
    public Addresses as(Name alias) {
        return new Addresses(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Addresses rename(String name) {
        return new Addresses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Addresses rename(Name name) {
        return new Addresses(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Long, Long, Boolean, String, String, String, String, String, String, String, String, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
