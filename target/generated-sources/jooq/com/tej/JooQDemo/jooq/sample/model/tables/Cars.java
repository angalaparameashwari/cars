/*
 * This file is generated by jOOQ.
 */
package com.tej.JooQDemo.jooq.sample.model.tables;


import com.tej.JooQDemo.jooq.sample.model.CarsApp;
import com.tej.JooQDemo.jooq.sample.model.Keys;
import com.tej.JooQDemo.jooq.sample.model.tables.records.CarsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cars extends TableImpl<CarsRecord> {

    private static final long serialVersionUID = 2096602586;

    /**
     * The reference instance of <code>cars_app.cars</code>
     */
    public static final Cars CARS = new Cars();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CarsRecord> getRecordType() {
        return CarsRecord.class;
    }

    /**
     * The column <code>cars_app.cars.id</code>.
     */
    public final TableField<CarsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('cars_app.cars_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>cars_app.cars.car_id</code>.
     */
    public final TableField<CarsRecord, Long> CAR_ID = createField(DSL.name("car_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cars_app.cars.registration_no</code>.
     */
    public final TableField<CarsRecord, String> REGISTRATION_NO = createField(DSL.name("registration_no"), org.jooq.impl.SQLDataType.VARCHAR(55), this, "");

    /**
     * The column <code>cars_app.cars.engine_no</code>.
     */
    public final TableField<CarsRecord, String> ENGINE_NO = createField(DSL.name("engine_no"), org.jooq.impl.SQLDataType.VARCHAR(55), this, "");

    /**
     * The column <code>cars_app.cars.is_rentable</code>.
     */
    public final TableField<CarsRecord, Boolean> IS_RENTABLE = createField(DSL.name("is_rentable"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>cars_app.cars.deleted</code>.
     */
    public final TableField<CarsRecord, String> DELETED = createField(DSL.name("deleted"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>cars_app.cars.created_at</code>.
     */
    public final TableField<CarsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>cars_app.cars.updated_at</code>.
     */
    public final TableField<CarsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>cars_app.cars</code> table reference
     */
    public Cars() {
        this(DSL.name("cars"), null);
    }

    /**
     * Create an aliased <code>cars_app.cars</code> table reference
     */
    public Cars(String alias) {
        this(DSL.name(alias), CARS);
    }

    /**
     * Create an aliased <code>cars_app.cars</code> table reference
     */
    public Cars(Name alias) {
        this(alias, CARS);
    }

    private Cars(Name alias, Table<CarsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cars(Name alias, Table<CarsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Cars(Table<O> child, ForeignKey<O, CarsRecord> key) {
        super(child, key, CARS);
    }

    @Override
    public Schema getSchema() {
        return CarsApp.CARS_APP;
    }

    @Override
    public Identity<CarsRecord, Long> getIdentity() {
        return Keys.IDENTITY_CARS;
    }

    @Override
    public UniqueKey<CarsRecord> getPrimaryKey() {
        return Keys.CARS_PKEY;
    }

    @Override
    public List<UniqueKey<CarsRecord>> getKeys() {
        return Arrays.<UniqueKey<CarsRecord>>asList(Keys.CARS_PKEY);
    }

    @Override
    public List<ForeignKey<CarsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CarsRecord, ?>>asList(Keys.CARS__CARS_CAR_ID_FKEY);
    }

    public CarsMeta carsMeta() {
        return new CarsMeta(this, Keys.CARS__CARS_CAR_ID_FKEY);
    }

    @Override
    public Cars as(String alias) {
        return new Cars(DSL.name(alias), this);
    }

    @Override
    public Cars as(Name alias) {
        return new Cars(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cars rename(String name) {
        return new Cars(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cars rename(Name name) {
        return new Cars(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, String, String, Boolean, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
